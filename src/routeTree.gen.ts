/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ExampleDashboardRouteImport } from './routes/example-dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DiscoverySwitchOrganisationRouteImport } from './routes/discovery.switch-organisation'
import { Route as DiscoverySelectOrganisationRouteImport } from './routes/discovery.select-organisation'
import { Route as DiscoveryOrganisationIdRouteImport } from './routes/discovery.$organisationId'
import { Route as OrganisationsOrganisationSlugDashboardRouteImport } from './routes/organisations.$organisationSlug.dashboard'
import { ServerRoute as ApiAuthenticateServerRouteImport } from './routes/api/authenticate'

const rootServerRouteImport = createServerRootRoute()

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ExampleDashboardRoute = ExampleDashboardRouteImport.update({
  id: '/example-dashboard',
  path: '/example-dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoverySwitchOrganisationRoute =
  DiscoverySwitchOrganisationRouteImport.update({
    id: '/discovery/switch-organisation',
    path: '/discovery/switch-organisation',
    getParentRoute: () => rootRouteImport,
  } as any)
const DiscoverySelectOrganisationRoute =
  DiscoverySelectOrganisationRouteImport.update({
    id: '/discovery/select-organisation',
    path: '/discovery/select-organisation',
    getParentRoute: () => rootRouteImport,
  } as any)
const DiscoveryOrganisationIdRoute = DiscoveryOrganisationIdRouteImport.update({
  id: '/discovery/$organisationId',
  path: '/discovery/$organisationId',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganisationsOrganisationSlugDashboardRoute =
  OrganisationsOrganisationSlugDashboardRouteImport.update({
    id: '/organisations/$organisationSlug/dashboard',
    path: '/organisations/$organisationSlug/dashboard',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiAuthenticateServerRoute = ApiAuthenticateServerRouteImport.update({
  id: '/api/authenticate',
  path: '/api/authenticate',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/example-dashboard': typeof ExampleDashboardRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/example-dashboard': typeof ExampleDashboardRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/example-dashboard': typeof ExampleDashboardRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/example-dashboard'
    | '/login'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/organisations/$organisationSlug/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/example-dashboard'
    | '/login'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/organisations/$organisationSlug/dashboard'
  id:
    | '__root__'
    | '/'
    | '/example-dashboard'
    | '/login'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/organisations/$organisationSlug/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExampleDashboardRoute: typeof ExampleDashboardRoute
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  DiscoveryOrganisationIdRoute: typeof DiscoveryOrganisationIdRoute
  DiscoverySelectOrganisationRoute: typeof DiscoverySelectOrganisationRoute
  DiscoverySwitchOrganisationRoute: typeof DiscoverySwitchOrganisationRoute
  OrganisationsOrganisationSlugDashboardRoute: typeof OrganisationsOrganisationSlugDashboardRoute
}
export interface FileServerRoutesByFullPath {
  '/api/authenticate': typeof ApiAuthenticateServerRoute
}
export interface FileServerRoutesByTo {
  '/api/authenticate': typeof ApiAuthenticateServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/authenticate': typeof ApiAuthenticateServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/authenticate'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/authenticate'
  id: '__root__' | '/api/authenticate'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthenticateServerRoute: typeof ApiAuthenticateServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/example-dashboard': {
      id: '/example-dashboard'
      path: '/example-dashboard'
      fullPath: '/example-dashboard'
      preLoaderRoute: typeof ExampleDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery/switch-organisation': {
      id: '/discovery/switch-organisation'
      path: '/discovery/switch-organisation'
      fullPath: '/discovery/switch-organisation'
      preLoaderRoute: typeof DiscoverySwitchOrganisationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery/select-organisation': {
      id: '/discovery/select-organisation'
      path: '/discovery/select-organisation'
      fullPath: '/discovery/select-organisation'
      preLoaderRoute: typeof DiscoverySelectOrganisationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery/$organisationId': {
      id: '/discovery/$organisationId'
      path: '/discovery/$organisationId'
      fullPath: '/discovery/$organisationId'
      preLoaderRoute: typeof DiscoveryOrganisationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organisations/$organisationSlug/dashboard': {
      id: '/organisations/$organisationSlug/dashboard'
      path: '/organisations/$organisationSlug/dashboard'
      fullPath: '/organisations/$organisationSlug/dashboard'
      preLoaderRoute: typeof OrganisationsOrganisationSlugDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/authenticate': {
      id: '/api/authenticate'
      path: '/api/authenticate'
      fullPath: '/api/authenticate'
      preLoaderRoute: typeof ApiAuthenticateServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExampleDashboardRoute: ExampleDashboardRoute,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  DiscoveryOrganisationIdRoute: DiscoveryOrganisationIdRoute,
  DiscoverySelectOrganisationRoute: DiscoverySelectOrganisationRoute,
  DiscoverySwitchOrganisationRoute: DiscoverySwitchOrganisationRoute,
  OrganisationsOrganisationSlugDashboardRoute:
    OrganisationsOrganisationSlugDashboardRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthenticateServerRoute: ApiAuthenticateServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
