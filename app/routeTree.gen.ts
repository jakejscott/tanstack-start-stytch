/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as IndexImport } from './routes/index'
import { Route as DiscoveryIndexImport } from './routes/discovery.index'
import { Route as DiscoverySwitchOrganisationImport } from './routes/discovery.switch-organisation'
import { Route as DiscoverySelectOrganisationImport } from './routes/discovery.select-organisation'
import { Route as DiscoveryOrganisationIdImport } from './routes/discovery.$organisationId'
import { Route as OrganisationsOrganisationSlugDashboardImport } from './routes/organisations.$organisationSlug.dashboard'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DiscoveryIndexRoute = DiscoveryIndexImport.update({
  id: '/discovery/',
  path: '/discovery/',
  getParentRoute: () => rootRoute,
} as any)

const DiscoverySwitchOrganisationRoute =
  DiscoverySwitchOrganisationImport.update({
    id: '/discovery/switch-organisation',
    path: '/discovery/switch-organisation',
    getParentRoute: () => rootRoute,
  } as any)

const DiscoverySelectOrganisationRoute =
  DiscoverySelectOrganisationImport.update({
    id: '/discovery/select-organisation',
    path: '/discovery/select-organisation',
    getParentRoute: () => rootRoute,
  } as any)

const DiscoveryOrganisationIdRoute = DiscoveryOrganisationIdImport.update({
  id: '/discovery/$organisationId',
  path: '/discovery/$organisationId',
  getParentRoute: () => rootRoute,
} as any)

const OrganisationsOrganisationSlugDashboardRoute =
  OrganisationsOrganisationSlugDashboardImport.update({
    id: '/organisations/$organisationSlug/dashboard',
    path: '/organisations/$organisationSlug/dashboard',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/discovery/$organisationId': {
      id: '/discovery/$organisationId'
      path: '/discovery/$organisationId'
      fullPath: '/discovery/$organisationId'
      preLoaderRoute: typeof DiscoveryOrganisationIdImport
      parentRoute: typeof rootRoute
    }
    '/discovery/select-organisation': {
      id: '/discovery/select-organisation'
      path: '/discovery/select-organisation'
      fullPath: '/discovery/select-organisation'
      preLoaderRoute: typeof DiscoverySelectOrganisationImport
      parentRoute: typeof rootRoute
    }
    '/discovery/switch-organisation': {
      id: '/discovery/switch-organisation'
      path: '/discovery/switch-organisation'
      fullPath: '/discovery/switch-organisation'
      preLoaderRoute: typeof DiscoverySwitchOrganisationImport
      parentRoute: typeof rootRoute
    }
    '/discovery/': {
      id: '/discovery/'
      path: '/discovery'
      fullPath: '/discovery'
      preLoaderRoute: typeof DiscoveryIndexImport
      parentRoute: typeof rootRoute
    }
    '/organisations/$organisationSlug/dashboard': {
      id: '/organisations/$organisationSlug/dashboard'
      path: '/organisations/$organisationSlug/dashboard'
      fullPath: '/organisations/$organisationSlug/dashboard'
      preLoaderRoute: typeof OrganisationsOrganisationSlugDashboardImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/discovery': typeof DiscoveryIndexRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/discovery': typeof DiscoveryIndexRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/discovery/$organisationId': typeof DiscoveryOrganisationIdRoute
  '/discovery/select-organisation': typeof DiscoverySelectOrganisationRoute
  '/discovery/switch-organisation': typeof DiscoverySwitchOrganisationRoute
  '/discovery/': typeof DiscoveryIndexRoute
  '/organisations/$organisationSlug/dashboard': typeof OrganisationsOrganisationSlugDashboardRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/discovery'
    | '/organisations/$organisationSlug/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/discovery'
    | '/organisations/$organisationSlug/dashboard'
  id:
    | '__root__'
    | '/'
    | '/logout'
    | '/discovery/$organisationId'
    | '/discovery/select-organisation'
    | '/discovery/switch-organisation'
    | '/discovery/'
    | '/organisations/$organisationSlug/dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LogoutRoute: typeof LogoutRoute
  DiscoveryOrganisationIdRoute: typeof DiscoveryOrganisationIdRoute
  DiscoverySelectOrganisationRoute: typeof DiscoverySelectOrganisationRoute
  DiscoverySwitchOrganisationRoute: typeof DiscoverySwitchOrganisationRoute
  DiscoveryIndexRoute: typeof DiscoveryIndexRoute
  OrganisationsOrganisationSlugDashboardRoute: typeof OrganisationsOrganisationSlugDashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LogoutRoute: LogoutRoute,
  DiscoveryOrganisationIdRoute: DiscoveryOrganisationIdRoute,
  DiscoverySelectOrganisationRoute: DiscoverySelectOrganisationRoute,
  DiscoverySwitchOrganisationRoute: DiscoverySwitchOrganisationRoute,
  DiscoveryIndexRoute: DiscoveryIndexRoute,
  OrganisationsOrganisationSlugDashboardRoute:
    OrganisationsOrganisationSlugDashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/logout",
        "/discovery/$organisationId",
        "/discovery/select-organisation",
        "/discovery/switch-organisation",
        "/discovery/",
        "/organisations/$organisationSlug/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/discovery/$organisationId": {
      "filePath": "discovery.$organisationId.tsx"
    },
    "/discovery/select-organisation": {
      "filePath": "discovery.select-organisation.tsx"
    },
    "/discovery/switch-organisation": {
      "filePath": "discovery.switch-organisation.tsx"
    },
    "/discovery/": {
      "filePath": "discovery.index.tsx"
    },
    "/organisations/$organisationSlug/dashboard": {
      "filePath": "organisations.$organisationSlug.dashboard.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
